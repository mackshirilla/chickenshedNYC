{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/forms/inputValidation.ts", "../src/registration.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Validate First Name Input\nconst firstNameInput = document.getElementById('firstNameInput') as HTMLInputElement;\nconst firstNameError = document.getElementById('firstNameError') as HTMLDivElement;\n\nexport function validateFirstName() {\n  const isRequired = firstNameInput.hasAttribute('required');\n  if (isRequired && firstNameInput.value.trim() === '') {\n    firstNameError.textContent = 'First name required';\n    firstNameError.style.display = 'block';\n    firstNameInput.classList.add('error');\n    return false;\n  }\n  firstNameError.textContent = '';\n  firstNameError.style.display = 'none';\n  firstNameInput.classList.remove('error');\n  return true;\n}\n\nif (firstNameInput) {\n  firstNameInput.addEventListener('blur', validateFirstName);\n}\n\n// Validate Last Name Input\nconst lastNameInput = document.getElementById('lastNameInput') as HTMLInputElement;\nconst lastNameError = document.getElementById('lastNameError') as HTMLDivElement;\n\nexport function validateLastName() {\n  const isRequired = lastNameInput.hasAttribute('required');\n  if (isRequired && lastNameInput.value.trim() === '') {\n    lastNameError.textContent = 'Last name required';\n    lastNameError.style.display = 'block';\n    lastNameInput.classList.add('error');\n    return false;\n  }\n  lastNameError.textContent = '';\n  lastNameError.style.display = 'none';\n  lastNameInput.classList.remove('error');\n  return true;\n}\n\nif (lastNameInput) {\n  lastNameInput.addEventListener('blur', validateLastName);\n}\n\n// Validate Email Input\nconst emailInput = document.getElementById('emailInput') as HTMLInputElement;\nconst emailError = document.getElementById('emailError') as HTMLDivElement;\n\nexport function validateEmail() {\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n  if (emailInput.hasAttribute('required') && emailInput.value.trim() === '') {\n    emailError.textContent = 'Email is required';\n    emailError.style.display = 'block';\n    emailInput.classList.add('error');\n    return false;\n  }\n  if (emailInput.value.trim() !== '' && !emailRegex.test(emailInput.value)) {\n    emailError.textContent = 'Please enter a valid email';\n    emailError.style.display = 'block';\n    emailInput.classList.add('error');\n    return false;\n  }\n  emailError.textContent = '';\n  emailError.style.display = 'none';\n  emailInput.classList.remove('error');\n  return true;\n}\n\nif (emailInput) {\n  emailInput.addEventListener('blur', validateEmail);\n}\n\n// Validate Phone Input\nconst phoneInput = document.getElementById('phoneInput') as HTMLInputElement;\nconst phoneError = document.getElementById('phoneError') as HTMLDivElement;\n\nexport function formatPhoneNumber(value: string) {\n  const phoneNumber = value.replace(/\\D/g, '');\n  if (phoneNumber.length === 0) {\n    return '';\n  }\n  if (phoneNumber.length < 4) {\n    return `(${phoneNumber}`;\n  }\n  if (phoneNumber.length < 7) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  }\n  return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n}\n\nexport function validatePhone() {\n  const phoneRegex = /^\\D*(\\d{3})\\D*\\D*(\\d{3})\\D*(\\d{4})\\D*$/;\n  const isRequired = phoneInput.required;\n  if (isRequired && phoneInput.value.trim() === '') {\n    phoneError.textContent = 'Phone is required';\n    phoneError.style.display = 'block';\n    phoneInput.classList.add('error');\n    return false;\n  }\n  if (phoneInput.value.trim() !== '' && !phoneRegex.test(phoneInput.value)) {\n    phoneError.textContent = 'Please enter a valid phone number';\n    phoneError.style.display = 'block';\n    phoneInput.classList.add('error');\n    return false;\n  }\n  phoneInput.value = formatPhoneNumber(phoneInput.value);\n  phoneError.textContent = '';\n  phoneError.style.display = 'none';\n  phoneInput.classList.remove('error');\n  return true;\n}\nif (phoneInput) {\n  phoneInput.addEventListener('input', (event) => {\n    const input = event.target as HTMLInputElement;\n    input.value = formatPhoneNumber(input.value);\n    validatePhone();\n  });\n}\n\n//validate DOB\nconst dobInput = document.getElementById('dobInput') as HTMLInputElement;\nconst dobError = document.getElementById('dobError') as HTMLDivElement;\n\nexport function validateDOB() {\n  if (dobInput.hasAttribute('required') && dobInput.value.trim() === '') {\n    dobError.textContent = 'Date of Birth is required';\n    dobError.style.display = 'block';\n    dobInput.classList.add('error');\n    return false;\n  }\n  dobError.textContent = '';\n  dobError.style.display = 'none';\n  dobInput.classList.remove('error');\n  return true;\n}\n\nif (dobInput) {\n  dobInput.addEventListener('blur', validateDOB);\n}\n\n//validate gender\nconst genderInput = document.getElementById('genderInput') as HTMLInputElement;\nconst genderError = document.getElementById('genderError') as HTMLDivElement;\n\nexport function validateGender() {\n  if (genderInput.hasAttribute('required') && genderInput.value.trim() === '') {\n    genderError.textContent = 'Gender is required';\n    genderError.style.display = 'block';\n    genderInput.classList.add('error');\n    return false;\n  }\n  genderError.textContent = '';\n  genderError.style.display = 'none';\n  genderInput.classList.remove('error');\n  return true;\n}\n\nif (genderInput) {\n  genderInput.addEventListener('blur', validateGender);\n}\n\n// validate school name\nconst schoolInput = document.getElementById('schoolInput') as HTMLInputElement;\nconst schoolError = document.getElementById('schoolError') as HTMLDivElement;\n\nexport function validateSchool() {\n  if (schoolInput.hasAttribute('required') && schoolInput.value.trim() === '') {\n    schoolError.textContent = 'School name is required';\n    schoolError.style.display = 'block';\n    schoolInput.classList.add('error');\n    return false;\n  }\n  schoolError.textContent = '';\n  schoolError.style.display = 'none';\n  schoolInput.classList.remove('error');\n  return true;\n}\n\nif (schoolInput) {\n  schoolInput.addEventListener('blur', validateSchool);\n}\n\n// validate grade\nconst gradeInput = document.getElementById('gradeInput') as HTMLInputElement;\nconst gradeError = document.getElementById('gradeError') as HTMLDivElement;\n\nexport function validateGrade() {\n  if (gradeInput.hasAttribute('required') && gradeInput.value.trim() === 'N/A') {\n    gradeError.textContent = 'Grade is required';\n    gradeError.style.display = 'block';\n    gradeInput.classList.add('error');\n    return false;\n  }\n  gradeError.textContent = '';\n  gradeError.style.display = 'none';\n  gradeInput.classList.remove('error');\n  return true;\n}\n\nif (gradeInput) {\n  gradeInput.addEventListener('blur', validateGrade);\n}\n\n// validate ethnicity\nconst ethnicityInput = document.getElementById('ethnicityInput') as HTMLInputElement;\nconst ethnicityError = document.getElementById('ethnicityError') as HTMLDivElement;\n\nexport function validateEthnicity() {\n  if (ethnicityInput.hasAttribute('required') && ethnicityInput.value.trim() === '') {\n    ethnicityError.textContent = 'Ethnicity is required';\n    ethnicityError.style.display = 'block';\n    ethnicityInput.classList.add('error');\n    return false;\n  }\n  ethnicityError.textContent = '';\n  ethnicityError.style.display = 'none';\n  ethnicityError.classList.remove('error');\n  return true;\n}\n\nif (ethnicityError) {\n  ethnicityInput.addEventListener('blur', validateEthnicity);\n}\n\n// validate health input\nconst healthInput = document.getElementById('healthInput') as HTMLInputElement;\nconst healthError = document.getElementById('healthError') as HTMLDivElement;\n\nexport function validateHealth() {\n  if (healthInput.hasAttribute('required') && healthInput.value.trim() === '') {\n    healthError.textContent = 'This field is required';\n    healthError.style.display = 'block';\n    healthInput.classList.add('error');\n    return false;\n  }\n  healthError.textContent = '';\n  healthError.style.display = 'none';\n  healthInput.classList.remove('error');\n  return true;\n}\n\nif (healthInput) {\n  healthInput.addEventListener('blur', validateHealth);\n}\n\n// validate emergency contact\nconst emergencyInput = document.getElementById('emergencyContact') as HTMLInputElement;\nconst emergencyError = document.getElementById('emergencyError') as HTMLDivElement;\n\nexport function validateEmergency() {\n  if (emergencyInput.hasAttribute('required') && emergencyInput.value.trim() === '') {\n    emergencyError.textContent = 'This field is required';\n    emergencyError.style.display = 'block';\n    emergencyInput.classList.add('error');\n    return false;\n  }\n  emergencyError.textContent = '';\n  emergencyError.style.display = 'none';\n  emergencyInput.classList.remove('error');\n  return true;\n}\n\nif (emergencyInput) {\n  emergencyInput.addEventListener('blur', validateEmergency);\n}\n\n// validate dismissal\nconst dismissal = document.getElementById('dismissal') as HTMLInputElement;\nconst dismissalError = document.getElementById('dismissalError') as HTMLDivElement;\n\nexport function validateDismissal() {\n  if (dismissal.hasAttribute('required') && dismissal.value.trim() === '') {\n    dismissalError.textContent = 'This field is required';\n    dismissalError.style.display = 'block';\n    dismissal.classList.add('error');\n    return false;\n  }\n  dismissalError.textContent = '';\n  dismissalError.style.display = 'none';\n  dismissal.classList.remove('error');\n  return true;\n}\n\nif (dismissal) {\n  dismissal.addEventListener('blur', validateDismissal);\n}\n\n// Validate Additional Email\nconst additionalEmail = document.getElementById('additionalEmail') as HTMLInputElement;\nconst additionalEmailError = document.getElementById('additionalEmailError') as HTMLDivElement;\n\nexport function validateAdditionalEmail() {\n  const additionalEmailRegex = /^\\S+@\\S+\\.\\S+$/;\n  if (additionalEmail.hasAttribute('required') && additionalEmail.value.trim() === '') {\n    additionalEmailError.textContent = 'Email is required';\n    additionalEmailError.style.display = 'block';\n    additionalEmail.classList.add('error');\n    return false;\n  }\n  if (additionalEmail.value.trim() !== '' && !additionalEmailRegex.test(additionalEmail.value)) {\n    additionalEmailError.textContent = 'Please enter a valid email';\n    additionalEmailError.style.display = 'block';\n    additionalEmail.classList.add('error');\n    return false;\n  }\n  additionalEmailError.textContent = '';\n  additionalEmailError.style.display = 'none';\n  additionalEmail.classList.remove('error');\n  return true;\n}\n\nif (additionalEmail) {\n  additionalEmail.addEventListener('blur', validateAdditionalEmail);\n}\n\n// Validate interestInput\nconst interestInput = document.getElementById('interestInput') as HTMLInputElement;\nconst interestError = document.getElementById('interestError') as HTMLDivElement;\n\nexport function validateInterest() {\n  if (interestInput.hasAttribute('required') && interestInput.value.trim() === '') {\n    interestError.textContent = 'This field is required';\n    interestError.style.display = 'block';\n    interestInput.classList.add('error');\n    return false;\n  }\n  interestError.textContent = '';\n  interestError.style.display = 'none';\n  interestInput.classList.remove('error');\n  return true;\n}\n\nif (interestInput) {\n  interestInput.addEventListener('blur', validateInterest);\n}\n", "// Define interface for student profile\ninterface StudentProfile {\n  firstName: string;\n  lastName: string;\n  id: number;\n}\n\n// Array to hold selected students\nconst studentsSelected: StudentProfile[] = [];\n\n// Variable to hold selected priceID\nlet priceID: string | null = null;\n\n// Function to fetch student profiles from the server\nasync function fetchStudentProfiles(guardianUserID: string): Promise<StudentProfile[]> {\n  // Send GET request to server to fetch student profiles\n  const response = await fetch(\n    `https://x8ki-letl-twmt.n7.xano.io/api:2gnTJ2I8/student_profiles?guardianUserID=${guardianUserID}`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n\n  // If the response is not OK, throw an error\n  if (!response.ok) {\n    const responseData = await response.json();\n    throw new Error(responseData.message || 'An error occurred');\n  }\n\n  // Otherwise, parse the response data and return it\n  const responseData: { allStudentProfiles: StudentProfile[] } = await response.json();\n  return responseData.allStudentProfiles;\n}\n\n// Function to handle the display and interaction of student profiles\nasync function handleStudentProfiles(): Promise<void> {\n  // Get user profile from localStorage\n  const profileString = localStorage.getItem('profile');\n  const profile = profileString ? JSON.parse(profileString) : null;\n  const guardianUserID = profile?.userID;\n\n  // Get loading animation and error message elements\n  const loadingAnimation = document.getElementById('loadingAnimation') as HTMLDivElement;\n  const registrationFormWrapper = document.getElementById(\n    'registrationFormWrapper'\n  ) as HTMLDivElement;\n  const noStudentProfiles = document.getElementById('NoStudentProfiles') as HTMLDivElement;\n\n  // Hide the registration form and show loading animation\n  registrationFormWrapper.style.display = 'none';\n  noStudentProfiles.style.display = 'none';\n  loadingAnimation.style.display = 'block';\n\n  // Try to fetch student profiles from server\n  try {\n    const allStudentProfiles = await fetchStudentProfiles(guardianUserID);\n\n    // If student profiles are returned, populate student list\n    if (allStudentProfiles.length > 0) {\n      const studentList = document.getElementById('studentList') as HTMLDivElement;\n      const studentCardTemplate = document.getElementById('studentItem') as HTMLDivElement;\n\n      // Clear previous student cards\n      studentList.innerHTML = '';\n\n      // Create student card for each student profile\n      allStudentProfiles.forEach((studentProfile) => {\n        // Clone student card template\n        const clonedTemplate = studentCardTemplate.cloneNode(true) as HTMLDivElement;\n\n        // Get elements for student name and checkbox\n        const studentNameElement = clonedTemplate.querySelector('.fs_checkbox-1_label');\n        const studentCheckbox = clonedTemplate.querySelector(\n          'input[type=\"checkbox\"]'\n        ) as HTMLInputElement;\n\n        // Set student name and checkbox value\n        if (studentNameElement) {\n          studentNameElement.textContent = `${studentProfile.firstName} ${studentProfile.lastName}`;\n        }\n\n        // Handle checkbox state changes\n        if (studentCheckbox) {\n          studentCheckbox.value = studentProfile.id.toString();\n\n          studentCheckbox.addEventListener('change', () => {\n            // When checkbox is checked, add student to selected students\n            // When checkbox is unchecked, remove student from selected students\n            if (studentCheckbox.checked) {\n              studentsSelected.push(studentProfile);\n            } else {\n              const index = studentsSelected.findIndex(\n                (student) => student.id === studentProfile.id\n              );\n              if (index !== -1) {\n                studentsSelected.splice(index, 1);\n              }\n            }\n            // Log the current selected students\n            console.log('Selected Student Profiles:', studentsSelected);\n          });\n        }\n\n        // Append student card to student list\n        studentList.appendChild(clonedTemplate);\n      });\n\n      // Hide student card template and display student list\n      studentCardTemplate.style.display = 'none';\n      studentList.style.display = 'grid';\n\n      // Hide loading animation and display the registration form\n      loadingAnimation.style.display = 'none';\n      registrationFormWrapper.style.display = 'block';\n    } else {\n      // No student profiles found\n      // Hide loading animation and display the \"No Student Profiles\" message\n      loadingAnimation.style.display = 'none';\n      noStudentProfiles.style.display = 'block';\n      registrationFormWrapper.style.display = 'none';\n    }\n  } catch (error) {\n    // Log error and display error message\n    console.error('An error occurred while fetching student profiles:', error);\n    alert('An error occurred while fetching student profiles.');\n  }\n}\n\n// Function to handle the radio buttons for payment type\nfunction handleRadioButtons(): void {\n  // Fetch all radio buttons with the name 'paymentType'\n  const radioButtons = document.querySelectorAll('input[name=\"paymentType\"]');\n\n  // Add event listener for each radio button\n  radioButtons.forEach((radio) => {\n    (radio as HTMLInputElement).addEventListener('change', function () {\n      if (this.checked) {\n        // Get the priceID attribute from the selected radio button and update the variable\n        priceID = this.getAttribute('priceid');\n        // log the radio buttons value to the console\n        console.log(`Selected payment type: ${this.value}`);\n        // Log the updated priceID to the console\n        console.log(`Updated priceID: ${priceID}`);\n        // update hidden input depositOnly value to true if the selected payment type is deposit\n        if (this.value === 'Deposit') {\n          const depositOnly = document.getElementById('depositOnly') as HTMLInputElement;\n          depositOnly.value = 'true';\n          const toggleNoOverflow = document.getElementById('toggleNoOverflow') as HTMLDivElement;\n          //set height to 16rem\n          toggleNoOverflow.style.height = '16rem';\n        } else {\n          const depositOnly = document.getElementById('depositOnly') as HTMLInputElement;\n          depositOnly.value = 'false';\n          const toggleNoOverflow = document.getElementById('toggleNoOverflow') as HTMLDivElement;\n          //set height to 16rem\n          toggleNoOverflow.style.height = '0rem';\n        }\n      }\n    });\n  });\n}\n\n//import validateInterest\nimport { validateInterest } from './utils/forms/inputValidation';\n\n// Function to handle the form submission\nfunction handleFormSubmit(): void {\n  // Get elements for submit button and error messages\n  const submitButton = document.getElementById('submitButton');\n  const studentListError = document.getElementById('studentListError');\n  const paymentError = document.getElementById('paymentError');\n  const submitError = document.getElementById('submitError');\n  const requestLoadingAnimation = document.getElementById('requestLoadingAnimation');\n\n  // Add click event listener for submit button\n  if (submitButton) {\n    submitButton.addEventListener('click', async (event) => {\n      // Prevent the default form submission\n      event.preventDefault();\n\n      // Initialize an error flag to false\n      let errorFlag = false;\n\n      // Hide all error messages initially\n      if (studentListError) studentListError.style.display = 'none';\n      if (paymentError) paymentError.style.display = 'none';\n      if (submitError) submitError.style.display = 'none';\n\n      // Check if any student profile is selected\n      if (studentsSelected.length === 0) {\n        // If not, display the appropriate error message\n        if (studentListError) {\n          studentListError.style.display = 'block';\n          studentListError.innerText = 'This field is required';\n        }\n        errorFlag = true;\n      }\n\n      // Check if a payment type has been chosen\n      if (!priceID) {\n        // If not, display the appropriate error message\n        if (paymentError) {\n          paymentError.style.display = 'block';\n          paymentError.innerText = 'This field is required';\n        }\n        errorFlag = true;\n      }\n\n      //validate interest\n      const interest = document.getElementById('interestInput') as HTMLInputElement;\n      const interestError = document.getElementById('interestError');\n      const interestValue = interest.value;\n      const interestValid = validateInterest(interestValue);\n      if (!interestValid) {\n        if (interestError) {\n          interestError.style.display = 'block';\n          interestError.innerText = 'This field is required';\n        } else {\n          interestError.style.display = 'none';\n        }\n        errorFlag = true;\n      }\n\n      // If any error was encountered, prevent form submission and show the submit error\n      if (errorFlag) {\n        if (submitError) submitError.style.display = 'block';\n        // Update the error message\n        if (submitError) submitError.innerText = 'Please make sure all required fields are filled';\n        return; // If there's an error, don't proceed with the submission\n      }\n\n      // Fetch user profile from local storage\n      const profileString = localStorage.getItem('profile');\n      const profile = profileString ? JSON.parse(profileString) : null;\n      const userID = profile?.userID;\n      const firstName = profile?.firstName;\n      const lastName = profile?.lastName;\n\n      // Fetch checkbox values\n      const finAidCheckbox = document.getElementById('finAid') as HTMLInputElement;\n      const finPlanCheckbox = document.getElementById('finPlan') as HTMLInputElement;\n\n      // Fetch hidden input values\n      const contactListIDInput = document.getElementById('contactListID') as HTMLInputElement;\n      const sessionIDInput = document.getElementById('sessionID') as HTMLInputElement;\n      const followUpEmailInput = document.getElementById('followUpEmailID') as HTMLInputElement;\n      const colorInput = document.getElementById('color') as HTMLInputElement;\n      const imageURLInput = document.getElementById('imageURL') as HTMLInputElement;\n      const programInput = document.getElementById('program') as HTMLInputElement;\n      const workshopInput = document.getElementById('workshop') as HTMLInputElement;\n      const sessionTimeInput = document.getElementById('sessionTime') as HTMLInputElement;\n      const sessionDayInput = document.getElementById('sessionDay') as HTMLInputElement;\n      const depositOnlyInput = document.getElementById('depositOnly') as HTMLInputElement;\n      const startDateInput = document.getElementById('startDate') as HTMLInputElement;\n      const endDateInput = document.getElementById('endDate') as HTMLInputElement;\n\n      // Fetch the selected radio button for payment type\n      const paymentTypeRadioButtons = document.querySelectorAll(\n        'input[name=\"paymentType\"]:checked'\n      );\n      const selectedPaymentTypeRadioButton = paymentTypeRadioButtons[0] as HTMLInputElement;\n      const unitAmount = selectedPaymentTypeRadioButton\n        ? selectedPaymentTypeRadioButton.getAttribute('unitAmount')\n        : null;\n\n      // Extract information from selected students and other form inputs\n      const studentIDs = studentsSelected.map((student) => student.id); // Extract IDs from the selected students\n      const studentNames = studentsSelected.map(\n        (student) => `${student.firstName} ${student.lastName}`\n      ); // Extract names from the selected students\n      const color = colorInput ? colorInput.value : '';\n      const imageURL = imageURLInput ? imageURLInput.value : '';\n      const program = programInput ? programInput.value : '';\n      const workshop = workshopInput ? workshopInput.value : '';\n      const sessionTime = sessionTimeInput ? sessionTimeInput.value : '';\n      const sessionDay = sessionDayInput ? sessionDayInput.value : '';\n      const finAid = finAidCheckbox ? finAidCheckbox.checked : false;\n      const finPlan = finPlanCheckbox ? finPlanCheckbox.checked : false;\n      const depositOnly = depositOnlyInput ? depositOnlyInput.value : 'false';\n      const emailFollowUpID = followUpEmailInput ? followUpEmailInput.value : '';\n      const sessionID = sessionIDInput ? sessionIDInput.value : '';\n      const contactListID = contactListIDInput ? contactListIDInput.value : '';\n      const startDate = startDateInput ? startDateInput.value : '';\n      const endDate = endDateInput ? endDateInput.value : '';\n\n      //remove any empty strings from the contactListID array\n      const contactLists = contactListID\n        .split(',')\n        .map((item) => item.trim())\n        .filter((item) => item);\n      // Show the request loading animation\n      if (requestLoadingAnimation) requestLoadingAnimation.style.display = 'block';\n\n      try {\n        // Make a POST request to your endpoint with the form data\n        const response = await fetch('https://x8ki-letl-twmt.n7.xano.io/api:2gnTJ2I8/cart_items', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            userID,\n            firstName,\n            lastName,\n            studentIDs,\n            studentNames,\n            priceID,\n            unitAmount,\n            color,\n            imageURL,\n            program,\n            workshop,\n            sessionTime,\n            sessionDay,\n            finAid,\n            finPlan,\n            depositOnly,\n            quantity: studentsSelected.length,\n            emailFollowUpID,\n            sessionID,\n            contactLists,\n            startDate,\n            endDate,\n          }),\n        });\n\n        if (response.ok) {\n          // Hide the request loading animation\n          if (requestLoadingAnimation) requestLoadingAnimation.style.display = 'none';\n\n          // Redirect the user to the next page\n          window.location.href = '/my-account/cart';\n        } else {\n          throw new Error('An error occurred while submitting the form');\n        }\n      } catch (error) {\n        // Handle any errors that occurred during the request\n        console.error(error);\n\n        // Hide the request loading animation\n        if (requestLoadingAnimation) requestLoadingAnimation.style.display = 'none';\n\n        // Display the submit error message\n        if (submitError) submitError.style.display = 'block';\n      }\n    });\n  }\n}\n\n// Function to handle the Free form submission\nfunction handleFreeFormSubmit(): void {\n  const freeSubmitButton = document.getElementById('freeSubmitButton');\n  const studentListError = document.getElementById('studentListError');\n  const submitError = document.getElementById('submitError');\n  const freeRequestLoadingAnimation = document.getElementById('freeRequestLoadingAnimation');\n\n  if (freeSubmitButton) {\n    freeSubmitButton.addEventListener('click', async (event) => {\n      event.preventDefault();\n\n      let errorFlag = false;\n\n      if (studentListError) {\n        studentListError.style.display = 'none';\n      }\n      if (submitError) {\n        submitError.style.display = 'none';\n      }\n\n      if (studentsSelected.length === 0) {\n        if (studentListError) {\n          studentListError.style.display = 'block';\n          studentListError.innerText = 'This field is required';\n        }\n        errorFlag = true;\n      }\n\n      if (errorFlag) {\n        if (submitError) {\n          submitError.style.display = 'block';\n          submitError.innerText = 'Please make sure all required fields are filled';\n        }\n        return;\n      }\n\n      const profileString = localStorage.getItem('profile');\n      const profile = profileString ? JSON.parse(profileString) : null;\n      const userID = profile?.userID;\n      const firstName = profile?.firstName;\n      const lastName = profile?.lastName;\n\n      const contactListIDInput = document.getElementById('contactListID') as HTMLInputElement;\n      const sessionIDInput = document.getElementById('sessionID') as HTMLInputElement;\n      const followUpEmailInput = document.getElementById('followUpEmailID') as HTMLInputElement;\n      const colorInput = document.getElementById('color') as HTMLInputElement;\n      const imageURLInput = document.getElementById('imageURL') as HTMLInputElement;\n      const programInput = document.getElementById('program') as HTMLInputElement;\n      const workshopInput = document.getElementById('workshop') as HTMLInputElement;\n      const sessionTimeInput = document.getElementById('sessionTime') as HTMLInputElement;\n      const sessionDayInput = document.getElementById('sessionDay') as HTMLInputElement;\n      const startDateInput = document.getElementById('startDate') as HTMLInputElement;\n      const endDateInput = document.getElementById('endDate') as HTMLInputElement;\n\n      const studentIDs = studentsSelected.map((student) => student.id);\n      const studentNames = studentsSelected.map(\n        (student) => `${student.firstName} ${student.lastName}`\n      );\n      const color = colorInput ? colorInput.value : '';\n      const imageURL = imageURLInput ? imageURLInput.value : '';\n      const program = programInput ? programInput.value : '';\n      const workshop = workshopInput ? workshopInput.value : '';\n      const sessionTime = sessionTimeInput ? sessionTimeInput.value : '';\n      const sessionDay = sessionDayInput ? sessionDayInput.value : '';\n      const emailFollowUpID = followUpEmailInput ? followUpEmailInput.value : '';\n      const sessionID = sessionIDInput ? sessionIDInput.value : '';\n      const contactListID = contactListIDInput ? contactListIDInput.value : '';\n      const startDate = startDateInput ? startDateInput.value : '';\n      const endDate = endDateInput ? endDateInput.value : '';\n\n      const contactLists = contactListID\n        .split(',')\n        .map((item) => item.trim())\n        .filter(Boolean);\n\n      if (freeRequestLoadingAnimation) {\n        freeRequestLoadingAnimation.style.display = 'block';\n      }\n\n      try {\n        const response = await fetch(\n          'https://x8ki-letl-twmt.n7.xano.io/api:2gnTJ2I8/FREE_REGISTRATION',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              userID,\n              firstName,\n              lastName,\n              studentIDs,\n              studentNames,\n              color,\n              imageURL,\n              program,\n              workshop,\n              sessionTime,\n              sessionDay,\n              emailFollowUpID,\n              sessionID,\n              contactLists,\n              startDate,\n              endDate,\n            }),\n          }\n        );\n\n        if (response.ok) {\n          window.location.href = '/successful-checkout';\n        } else {\n          throw new Error('An error occurred while submitting the form');\n        }\n      } catch (error) {\n        console.error(error);\n        if (submitError) {\n          submitError.style.display = 'block';\n        }\n      } finally {\n        if (freeRequestLoadingAnimation) {\n          freeRequestLoadingAnimation.style.display = 'none';\n        }\n      }\n    });\n  }\n}\n\n// Wait for the DOM content to load before running the functions\ndocument.addEventListener('DOMContentLoaded', function () {\n  const notLoggedInElement = document.getElementById('NotLoggedIn');\n  const registrationFormWrapper = document.getElementById('registrationFormWrapper');\n  const loadingAnimation = document.getElementById('loadingAnimation');\n\n  if (localStorage.getItem('profile') === null) {\n    // User is not logged in\n    if (notLoggedInElement) {\n      notLoggedInElement.style.display = 'block';\n    }\n    if (registrationFormWrapper) {\n      registrationFormWrapper.style.display = 'none';\n      loadingAnimation.style.display = 'none';\n    }\n  } else {\n    // User is logged in\n    if (notLoggedInElement) {\n      notLoggedInElement.style.display = 'none';\n    }\n    if (registrationFormWrapper) {\n      registrationFormWrapper.style.display = 'block';\n      handleStudentProfiles();\n    }\n  }\n\n  //if finAid or finPlan is checked, select deposit radio button\n  const finAidCheckbox = document.getElementById('finAid') as HTMLInputElement;\n  const finPlanCheckbox = document.getElementById('finPlan') as HTMLInputElement;\n\n  // get radio buttons by value\n  const depositRadioButton = document.querySelector(\n    'input[name=\"paymentType\"][value=\"Deposit\"]'\n  ) as HTMLInputElement;\n\n  // Get other radio buttons by their values (adjust these selectors according to your HTML)\n  const otherRadioButtons = Array.from(\n    document.querySelectorAll('input[name=\"paymentType\"]:not([value=\"Deposit\"])')\n  ) as HTMLInputElement[];\n\n  // if finAid or finPlan are checked, auto click deposit radio button\n  if (finAidCheckbox) {\n    finAidCheckbox.addEventListener('change', () => {\n      if (finAidCheckbox.checked || (finPlanCheckbox && finPlanCheckbox.checked)) {\n        depositRadioButton.click();\n      }\n    });\n  }\n\n  if (finPlanCheckbox) {\n    finPlanCheckbox.addEventListener('change', () => {\n      if (finPlanCheckbox.checked || (finAidCheckbox && finAidCheckbox.checked)) {\n        depositRadioButton.click();\n      }\n    });\n  }\n\n  // If other payment options are selected, uncheck finAid and finPlan\n  otherRadioButtons.forEach((radioButton) => {\n    radioButton.addEventListener('change', () => {\n      if (radioButton.checked) {\n        if (finAidCheckbox) finAidCheckbox.checked = false;\n        if (finPlanCheckbox) finPlanCheckbox.checked = false;\n      }\n    });\n  });\n\n  handleRadioButtons();\n  handleFormSubmit();\n  handleFreeFormSubmit();\n\n  //if finAid is checked change #finAidText to 'Yes'\n  const finAidText = document.getElementById('finAidText');\n  if (finAidCheckbox) {\n    finAidCheckbox.addEventListener('change', () => {\n      if (finAidCheckbox.checked) {\n        finAidText.innerText = 'Yes';\n      } else {\n        finAidText.innerText = 'No';\n      }\n    });\n  }\n\n  //if finPlan is checked change #finPlanText to 'Yes'\n  const finPlanText = document.getElementById('finPlanText');\n  if (finPlanCheckbox) {\n    finPlanCheckbox.addEventListener('change', () => {\n      if (finPlanCheckbox.checked) {\n        finPlanText.innerText = 'Yes';\n      } else {\n        finPlanText.innerText = 'No';\n      }\n    });\n  }\n});\n\n//if the button with id 'addStudent' is clicked set redirectURL in localStorage and redirect to current page\nconst addStudentButton = document.getElementById('addStudent');\nif (addStudentButton) {\n  addStudentButton.addEventListener('click', () => {\n    localStorage.setItem('redirectURL', window.location.href);\n    window.location.href = '/create-account/add-student';\n  });\n}\n"],
  "mappings": "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",
  "names": ["responseData", "interestError"]
}
