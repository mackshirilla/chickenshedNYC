{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/donation.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Add an event listener to the form submit button\nconst submitDonationButton = document.getElementById(\n  'submitDonationButton'\n) as HTMLButtonElement | null;\n\nif (submitDonationButton) {\n  submitDonationButton.addEventListener('click', handleSubmit);\n}\n\n// Add an event listener to the recurring toggle switch\nconst recurringToggle = document.getElementById('recurringToggle') as HTMLInputElement | null;\n\nif (recurringToggle) {\n  recurringToggle.addEventListener('change', handleRecurringToggle);\n}\n\n// Add an event listener to the custom amount radio button\nconst customRadioButton = document.getElementById('custom') as HTMLInputElement | null;\n\nif (customRadioButton) {\n  customRadioButton.addEventListener('change', handleDonationOptionChange);\n}\n\n// Add an event listener to the custom amount input\nconst customAmountInput = document.getElementById('customAmount') as HTMLInputElement | null;\n\nif (customAmountInput) {\n  customAmountInput.addEventListener('input', handleCustomAmountInput);\n}\n\n// Define the submit event handler\nfunction handleSubmit(event: Event) {\n  event.preventDefault(); // Prevent the default form submission\n\n  // Collect the form data\n  const form = document.querySelector('#wf-form-donationForm') as HTMLFormElement;\n  const formData = new FormData(form);\n  console.log('Form Data:', Object.fromEntries(formData)); // Log the form data for debugging\n\n  // Format the form data for the API call\n  const donationSelected = formData.get('donationSelected') as string;\n  const customAmount = formData.get('customAmount') as string;\n  const recurring = formData.get('recurring') ? true : false;\n  const paymentType = formData.get('paymentType') as string;\n  const anonymous = formData.get('anonymous') ? true : false;\n  const sendGridFollowUpID = formData.get('sendGridFollowUpID') as string;\n  const sendGridContactList = formData.get('sendGridContactListID') as string;\n  const campaign = formData.get('campaign') as string;\n\n  const metadata = {\n    price_id: '', // Initialize the price ID\n    product_id: '', // Initialize the product ID\n    anonymous: anonymous.toString(),\n    paymentType: paymentType,\n    customAmount: customAmount,\n    recurring: recurring,\n    checkoutCategory: 'donation',\n    sendGridFollowUpID: sendGridFollowUpID,\n    sendGridContactList: sendGridContactList,\n    campaign: campaign,\n  };\n  console.log('Metadata:', metadata); // Log the metadata for debugging\n  // Generate line items based on the selected product\n  const lineItems = [];\n  if (donationSelected === 'custom') {\n    // Custom amount\n    if (!customAmount) {\n      const donationProductError = document.getElementById('donationProductError') as HTMLElement;\n      donationProductError.style.display = 'block';\n      donationProductError.textContent = 'Please enter a custom donation amount.';\n      return;\n    }\n    lineItems.push({\n      price_id: '', // Leave blank for custom amount\n      quantity: 1,\n    });\n\n    // Set the custom mask height to 5rem\n    const customMask = document.getElementById('customMask') as HTMLElement;\n    customMask.style.height = '5rem';\n\n    // Reset the recurring mask height\n    const recurringMask = document.getElementById('recurringMask') as HTMLElement;\n    recurringMask.style.height = '';\n  } else {\n    // Predefined donation amount\n    if (!donationSelected) {\n      const donationProductError = document.getElementById('donationProductError') as HTMLElement;\n      donationProductError.style.display = 'block';\n      donationProductError.textContent = 'Please select a donation amount.';\n      return;\n    }\n    const selectedRadioButton = document.querySelector(\n      `input[name=\"donationSelected\"]:checked`\n    ) as HTMLInputElement;\n    const priceId = selectedRadioButton.getAttribute('price_id');\n    const productId = selectedRadioButton.getAttribute('product_id');\n    if (!priceId || !productId) {\n      console.error('Price ID or product ID not found for the selected donation product.');\n      return;\n    }\n    lineItems.push({\n      price_id: priceId,\n      quantity: 1,\n    });\n\n    metadata.product_id = productId; // Set the product ID in the metadata\n    metadata.price_id = priceId; // Set the price ID in the metadata\n\n    // Reset the custom mask height\n    const customMask = document.getElementById('customMask') as HTMLElement;\n    customMask.style.height = '';\n\n    if (recurring) {\n      // Set the recurring mask height to 5rem\n      const recurringMask = document.getElementById('recurringMask') as HTMLElement;\n      recurringMask.style.height = '5rem';\n\n      // Check if a payment type radio button is selected\n      let isPaymentTypeSelected = false;\n      const paymentTypeRadioButtons = document.querySelectorAll('input[name=\"paymentType\"]');\n      paymentTypeRadioButtons.forEach((radioButton) => {\n        const inputElement = radioButton as HTMLInputElement;\n        if (inputElement.checked) {\n          isPaymentTypeSelected = true;\n        }\n      });\n\n      // Show error if no payment type is selected\n      const donationRecurringError = document.getElementById(\n        'donationRecurringError'\n      ) as HTMLElement;\n      if (isPaymentTypeSelected) {\n        donationRecurringError.style.display = 'none';\n      } else {\n        donationRecurringError.style.display = 'block';\n        donationRecurringError.textContent = 'Please select a recurring payment type.';\n        return;\n      }\n    } else {\n      // Reset the recurring mask height\n      const recurringMask = document.getElementById('recurringMask') as HTMLElement;\n      recurringMask.style.height = '';\n    }\n  }\n\n  // Retrieve the dynamic success URL\n  const successUrlInput = document.getElementById('success_url') as HTMLInputElement;\n  const successUrl = successUrlInput.value;\n\n  // Create the payload for the API call to Stripe\n  const payload = {\n    success_url: successUrl,\n    cancel_url: window.location.href, // Use the current page as the cancel URL\n    line_items: lineItems.map((item) => ({ price: item.price_id, quantity: item.quantity })),\n    metadata: metadata,\n  };\n\n  // Show the loading animation\n  const loadingWrapper = document.getElementById('loadingWrapper') as HTMLElement;\n  loadingWrapper.style.display = 'block';\n\n  // Check if recurring toggle is enabled and no payment type is selected\n  if (recurring && !metadata.paymentType) {\n    const donationRecurringError = document.getElementById('donationRecurringError') as HTMLElement;\n    donationRecurringError.style.display = 'block';\n    donationRecurringError.textContent = 'Please select a recurring payment type.';\n    loadingWrapper.style.display = 'none'; // Hide the loading animation\n    return;\n  }\n\n  // Make an API call to your Xano endpoint\n  fetch('https://x8ki-letl-twmt.n7.xano.io/api:lRsgmoHt/sessions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      // Add any additional headers required by your Xano endpoint\n    },\n    body: JSON.stringify(payload),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Request failed.'); // Throw an error if the response status is not in the 2xx range\n      }\n      return response.json();\n    })\n    .then((data) => {\n      // Handle the API response and redirect the user to the checkout session URL\n      const { url } = data;\n      window.location.href = url;\n    })\n    .catch((error) => {\n      console.error('An error occurred:', error);\n      const requestError = document.getElementById('requestError') as HTMLElement;\n      const errorMessage = error.response\n        ? error.response.message\n        : 'Oops! Something went wrong while submitting the form.';\n      requestError.style.display = 'block';\n      requestError.textContent = errorMessage;\n    })\n    .finally(() => {\n      // Hide the loading animation\n      loadingWrapper.style.display = 'none';\n    });\n}\n// Handle the recurring toggle switch change event\nfunction handleRecurringToggle(event: Event) {\n  const recurringToggle = event.target as HTMLInputElement;\n  const recurringMask = document.getElementById('recurringMask') as HTMLElement;\n\n  if (recurringToggle.checked) {\n    // Set the recurring mask height to 5rem\n    recurringMask.style.height = '5rem';\n  } else {\n    // Reset the recurring mask height\n    recurringMask.style.height = '';\n  }\n}\n\n// Add event listeners to donation option radio buttons\nconst donationOptions = document.querySelectorAll('input[name=\"donationSelected\"]');\ndonationOptions.forEach((option) => {\n  option.addEventListener('change', handleDonationOptionChange);\n});\n\n// Handle the donation option change event\nfunction handleDonationOptionChange(event: Event) {\n  const selectedRadioButton = event.target as HTMLInputElement;\n  const customMask = document.getElementById('customMask') as HTMLElement;\n  const customAmountInput = document.getElementById('customAmount') as HTMLInputElement;\n\n  if (selectedRadioButton.value === 'custom') {\n    // Set the custom mask height to 5rem\n    customMask.style.height = '5rem';\n  } else {\n    // Reset the custom mask height to 0rem\n    customMask.style.height = '';\n\n    // Clear the custom amount input\n    customAmountInput.value = '';\n  }\n}\n\n// Handle the custom amount input event\nfunction handleCustomAmountInput(event: Event) {\n  const customAmountInput = event.target as HTMLInputElement;\n  const customAmount = customAmountInput.value;\n  const metadataCustomAmount = document.getElementById('metadataCustomAmount') as HTMLInputElement;\n  if (metadataCustomAmount) {\n    metadataCustomAmount.value = customAmount;\n  }\n}\n\n// Get all toggle switches\nconst toggleSwitches = document.querySelectorAll<HTMLInputElement>(\n  '.switch input[type=\"checkbox\"]'\n);\n\n// Add click event listener to each toggle switch\ntoggleSwitches.forEach(function (switchInput) {\n  switchInput.addEventListener('click', function () {\n    // Toggle the 'checked' class on the parent slider element\n    const parentNode = this.parentNode as HTMLElement;\n    parentNode.classList.toggle('checked');\n\n    // Get the toggle text element\n    const toggleText = parentNode.querySelector('.toggle-text') as HTMLElement | null;\n\n    // Check if the toggle text element exists\n    if (toggleText) {\n      // Update the toggle text based on the toggle switch state\n      if (this.checked) {\n        toggleText.textContent = 'Yes';\n      } else {\n        toggleText.textContent = 'No';\n      }\n    }\n  });\n});\n"],
  "mappings": "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",
  "names": ["recurringToggle", "customAmountInput"]
}
