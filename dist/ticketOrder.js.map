{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/ticketOrder.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "// Define the TicketRecord interface\ninterface TicketRecord {\n  fields: {\n    performanceDate: string;\n    performanceTime: string;\n    performanceName: string;\n    customerName: string;\n    ticketTier: string;\n    unitAmount: string;\n    seatAssignment: string;\n    QR_code: {\n      url: string;\n    }[];\n  };\n}\n\n// Get the order number from the URL\nconst urlParams = new URLSearchParams(window.location.search);\nconst orderNumber = urlParams.get('order');\n\n// Check if the orderNumber is null\nif (orderNumber !== null) {\n  // Define the Xano endpoint URL\n  const xanoEndpoint = 'https://x8ki-letl-twmt.n7.xano.io/api:2gnTJ2I8/Ticket_Orders';\n\n  // Construct the full URL with the query parameter\n  const urlWithQueryParams = new URL(xanoEndpoint);\n  urlWithQueryParams.searchParams.append('order', orderNumber);\n\n  // Make the GET request to Xano using fetch\n  fetch(urlWithQueryParams)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Request failed');\n      }\n      return response.json();\n    })\n    .then((data) => {\n      console.log('Response:', data);\n      // Hide the loadingWall div\n      const loadingWall = document.getElementById('loadingWall');\n      if (loadingWall) {\n        loadingWall.style.display = 'none';\n      }\n\n      // Parse the response and extract ticket records\n      const ticketRecords: TicketRecord[] =\n        data.response && data.response.result && data.response.result.records\n          ? data.response.result.records\n          : [];\n\n      // Get the template item\n      const templateItem = document.getElementById('ticketListTemplateItem');\n\n      // Get the ticket list container\n      const ticketList = document.getElementById('ticketList');\n\n      if (templateItem && ticketList) {\n        // Clear existing content in the ticket list\n        ticketList.innerHTML = '';\n\n        // Check if there are any ticket records\n        if (ticketRecords.length > 0) {\n          // Update the performance name title\n          const performanceNameTitle = document.getElementById('performanceNameTitle');\n          if (performanceNameTitle) {\n            performanceNameTitle.textContent = ticketRecords[0].fields.performanceName;\n          }\n\n          // Update the performance date title\n          const performanceDateTitle = document.getElementById('performanceDateTitle');\n          if (performanceDateTitle) {\n            performanceDateTitle.textContent = formatDate(ticketRecords[0].fields.performanceDate);\n          }\n\n          // Update the performance time title\n          const performanceTimeTitle = document.getElementById('performanceTimeTitle');\n          if (performanceTimeTitle) {\n            performanceTimeTitle.textContent = ticketRecords[0].fields.performanceTime;\n          }\n\n          ticketRecords\n            .filter((record) => !record.fields.ticketTier.toLowerCase().includes('donation'))\n            .forEach((record) => {\n              // Clone the template item to create a new ticket item\n              const ticketItem = templateItem.cloneNode(true) as HTMLElement;\n              ticketItem.classList.remove('hidden');\n\n              // Apply the ticket record data to the ticket item template\n              ticketItem.querySelector('#performanceDate')!.textContent = formatDate(\n                record.fields.performanceDate\n              );\n              ticketItem.querySelector('#performanceTime')!.textContent =\n                record.fields.performanceTime;\n              ticketItem.querySelector('#performanceName')!.textContent =\n                record.fields.performanceName;\n              ticketItem.querySelector('#customerName')!.textContent = record.fields.customerName;\n              ticketItem.querySelector('#ticketTier')!.textContent = record.fields.ticketTier;\n              ticketItem.querySelector('#unitAmount')!.textContent = formatCurrency(\n                record.fields.unitAmount\n              );\n              ticketItem.querySelector('#seatingAssignment')!.textContent =\n                record.fields.seatAssignment;\n\n              // Set the QR code image source\n              const qrCodeImage = ticketItem.querySelector('#QR_code') as HTMLImageElement;\n              if (qrCodeImage) {\n                const qrCodeUrl =\n                  record.fields.QR_code && record.fields.QR_code[0]?.url\n                    ? record.fields.QR_code[0]?.url\n                    : '';\n                qrCodeImage.src = qrCodeUrl;\n              }\n\n              // Append the ticket item to the ticket list\n              ticketList.appendChild(ticketItem);\n            });\n        } else {\n          // Display a message indicating no tickets found\n          const noTicketsMessage = document.createElement('div');\n          noTicketsMessage.textContent = 'No tickets found.';\n          ticketList.appendChild(noTicketsMessage);\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error:', error);\n      // Handle errors that occur during the request\n    });\n} else {\n  console.error('Order number not found in URL');\n  // Handle the case when the 'order' query parameter is not present in the URL\n}\n\n// Function to format the date in a friendly format\nfunction formatDate(dateString: string): string {\n  const date = new Date(dateString);\n  // Adjust the date using the time zone offset to display the correct date in the user's local time\n  const adjustedDate = new Date(date.getTime() + date.getTimezoneOffset() * 60000);\n  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  return adjustedDate.toLocaleDateString(undefined, options);\n}\n\n// Function to format the unit amount as currency\nfunction formatCurrency(amount: string): string {\n  const number = parseFloat(amount);\n  return number.toLocaleString(undefined, {\n    style: 'currency',\n    currency: 'USD',\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
